The ``1-my_list`` module
======================

Using ``MyList``
-------------------

This is an test text file.  First import
``MyList`` from the ``1-my_list`` module:

	>>> MyList = __import__('1-my_list').MyList

1. List has integer elements:

   >>> my_list = MyList()
   >>> my_list.append(1)
   >>> my_list.append(5)
   >>> my_list.append(3)
   >>> my_list.append(2)
   >>> my_list.append(4)

   Check append:

   >>> print(my_list)
   [1, 5, 3, 2, 4]

   And sort:

   >>> my_list.print_sorted()
   [1, 2, 3, 4, 5]

   Compares with unsorted:

   >>> my_list.print_sorted() == my_list
   [1, 2, 3, 4, 5]
   False


1A: With a sorted list:

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(4)
    >>> print(my_list)
    [1, 2, 3, 4]
    >>> my_list.print_sorted()
    [1, 2, 3, 4]


2. With char elements:

   >>> my_list = MyList()
   >>> my_list.append("a")
   >>> my_list.append("b")
   >>> my_list.append("z")
   >>> my_list.append("x")
   >>> my_list.print_sorted()
   ['a', 'b', 'x', 'z']


3. With String and int elements:

   >>> my_list = MyList()
   >>> my_list.append("hello")
   >>> my_list.append("1")
   >>> my_list.append("2")
   >>> my_list.print_sorted()
   ['1', '2', 'hello']

4. With only strings:

   >>> my_list = MyList()
   >>> my_list.append("hello")
   >>> my_list.append("good day")
   >>> my_list.print_sorted()
   ['good day', 'hello']

5. With float(inf):

   >>> my_list = MyList()
   >>> my_list.append(float('inf'))
   >>> my_list.append(400)
   >>> my_list.print_sorted()
   [400, inf]

   Just inf:

   >>> my_list = MyList(float('inf'))
   Traceback (most recent call last):
   TypeError: 'float' object is not iterable


6. With float(nan):

   >>> my_list = MyList()
   >>> my_list.append(float('nan'))
   >>> my_list.append(400)
   >>> my_list.print_sorted()
   [nan, 400]

   Just nan:

   >>> my_list = MyList(float('nan'))
   Traceback (most recent call last):
   TypeError: 'float' object is not iterable

7. Empty list:

   >>> my_list = MyList()
   >>> my_list.print_sorted()
   []

8. With None element:

   >>> my_list = MyList()
   >>> my_list.append(None)
   >>> my_list.append(2)
   >>> my_list.print_sorted()
   Traceback (most recent call last):
   TypeError: unorderable types: int() < NoneType()

9. Direct string:

   >>> my_list = MyList('hello')
   >>> my_list.print_sorted()
   ['e', 'h', 'l', 'l', 'o']

10. Direct single char:

    >>> my_list = MyList('a')
    >>> my_list.print_sorted()
    ['a']

11. With Float:

    >>> my_list = MyList(6.34)
    Traceback (most recent call last):
    TypeError: 'float' object is not iterable

12. With char and int

    >>> my_list = MyList()
    >>> my_list.append(9)
    >>> my_list.append(4)
    >>> my_list.append('a')
    >>> my_list.print_sorted()
    Traceback (most recent call last):
    TypeError: unorderable types: str() < int()

13. Check inherit of List:

    >>> issubclass(MyList, list)
    True

14. Negative numbers:

    >>> my_list = MyList()
    >>> my_list.append(5)
    >>> my_list.append(-2)
    >>> my_list.append(-4)
    >>> my_list.append(8)
    >>> my_list.print_sorted()
    [-4, -2, 5, 8]

    With arguments in print method:

    >>> my_list.print_sorted(2)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

15. All negatives:

    >>> my_list = MyList()
    >>> my_list.append(-4)
    >>> my_list.append(-3)
    >>> my_list.append(-8)
    >>> my_list.append(-5)
    >>> my_list.print_sorted()
    [-8, -5, -4, -3]
